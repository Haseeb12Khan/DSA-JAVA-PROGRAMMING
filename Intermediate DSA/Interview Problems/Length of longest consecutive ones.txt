				QUESTION
Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.

Input Format:
	-> The only argument given is string A.

Output Format:
	-> Return the length of the longest consecutive 1’s that can be achieved.

Constraints:	1 <= length of string <= 1000000
		A contains only characters 0 and 1.

For Example:
	Input 1:	A = "111000"

	Output 1:	3


	Input 2:	A = "111011101"

	Output 2:	7
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int solve(String A) 
	{
        	int ones = 0;
        	int N = A.length();
        	for(int i=0;i<N;i++)
		{
            		if(A.charAt(i) == '1')
			{
                		ones++;
            		}
        	}
        	if(ones == N)
		{
            		return N;
        	}
        	int ans = 0;
        	for(int i=0;i<N;i++)
		{
            		if(A.charAt(i) == '0')
			{
                		int l=0;
                		for(int j=i-1;j>=0;j--)
				{
                    			if(A.charAt(j)=='1')
					{
                        			l++;
                    			}
                    			else
					{
                        			break;
                    			}
                		}
                		int r=0;
                		for(int j=i+1;j<N;j++)
				{
                    			if(A.charAt(j)=='1')
					{
                       				r++;
                    			}
                    			else
					{
                        			break;
                    			}
                		}
                		ans = Math.max(ans,l+r+1);
            		}
        	}
        	if(ans>ones)
		{
            		return ans-1;
        	}
        	return ans;
    	}
}
