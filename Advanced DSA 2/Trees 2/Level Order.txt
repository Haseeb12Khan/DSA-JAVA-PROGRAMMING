				QUESTION
Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Problem Constraints:	1 <= number of nodes <= 10^5

Input Format:	
	-> First and only argument is root node of the binary tree, A.

Output Format:
	-> Return a 2D integer array denoting the level order traversal of the given binary tree.

Example Input:
	Input 1:
    3
   / \
  9  20
    /  \
   15   7

Input 2:
   1
  / \
 6   2
    /
   3

Example Output:
	Output 1:	[
   			  [3],
   			  [9, 20],
   			  [15, 7]
 			]

	Output 2:	[ 
   			  [1]
   			  [6, 2]
   			  [3]
 			]

Example Explanation:
	Explanation 1:	Return the 2D array. Each row denotes the traversal of each level.

	Explanation 2:	Return the 2D array. Each row denotes the traversal of each level.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
    	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
      	}
}
 
public class Solution 
{
    	public ArrayList<ArrayList<Integer>> solve(TreeNode A) 
	{
        	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        	Queue<TreeNode> q = new LinkedList<>();
        	q.add(A);
        	while(!q.isEmpty())
		{
            		int size = q.size();
            		ArrayList<Integer> row = new ArrayList<>();
            		for(int i=1;i<=size;i++)
			{
                		TreeNode x = q.remove();
                		row.add(x.val);
                		if(x.left != null)
				{
                    			q.add(x.left);
                		}
                		if(x.right != null)
				{
                    			q.add(x.right);
                		}
            		}
            		result.add(row);
        	}
        	return result;
    	}
}
