				QUESTION
Given preorder and inorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.

Problem Constraints:	1 <= number of nodes <= 10^5

Input Format:
	-> First argument is an integer array A denoting the preorder traversal of the tree.
	-> Second argument is an integer array B denoting the inorder traversal of the tree.

Output Format:
	-> Return the root node of the binary tree.

Example Input:
	Input 1:	A = [1, 2, 3]
 			B = [2, 1, 3]

	Input 2:	A = [1, 6, 2, 3]
 			B = [6, 1, 3, 2]

Example Output:
Output 1:
   1
  / \
 2   3

Output 2:
   1  
  / \
 6   2
    /
   3

Example Explanation:
	Explanation 1:	Create the binary tree and return the root node of the tree.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
    	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
      	}
}

public class Solution 
{
    	HashMap<Integer,Integer> hm = new HashMap<>();
    	public TreeNode buildTree(ArrayList<Integer> A, ArrayList<Integer> B) 
	{
        	for(int i=0;i<B.size();i++)
		{
            		hm.put(B.get(i),i);
        	}
        	return constructFromInorderPreorder(A,B,0,A.size()-1,0);
    	}
    	private TreeNode constructFromInorderPreorder(ArrayList<Integer> io,ArrayList<Integer> po,int st_in,int en_in,int st_po)
	{
        	if(st_in > en_in)
		{
            		return null;
        	}
        	TreeNode root = new TreeNode(io.get(st_po));
        	int root_in = hm.get(root.val);
        	int cnt_left = root_in - st_in;
        	int cnt_right = en_in - root_in;
        	root.left = constructFromInorderPreorder(io,po,st_in,root_in-1,st_po+1);
        	root.right = constructFromInorderPreorder(io,po,root_in+1,en_in,st_po+cnt_left+1);
        	return root;
    	}
}