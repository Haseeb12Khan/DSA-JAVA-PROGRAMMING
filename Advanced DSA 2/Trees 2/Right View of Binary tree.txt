				QUESTION
Given a binary tree of integers denoted by root A. Return an array of integers representing the right view of the Binary tree.
Right view of a Binary Tree is a set of nodes visible when the tree is visited from Right side.

Problem Constraints:	1 <= Number of nodes in binary tree <= 100000
			0 <= node values <= 10^9

Input Format:
	-> First and only argument is head of the binary tree A.

Output Format:
	-> Return an array, representing the right view of the binary tree.

Example Input:
	Input 1: 
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8

Input 2:
            1
           /  \
          2    3
           \
            4
             \
              5

Example Output:
	Output 1:	[1, 3, 7, 8]

	Output 2:	[1, 3, 4, 5]

Example Explanation:
	Explanation 1:	Right view is described.

	Explanation 2:	Right view is described.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION


class TreeNode 
{
    	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
      	}
}

public class Solution 
{
    	public ArrayList<Integer> solve(TreeNode A) 
	{
        	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        	Queue<TreeNode> q = new LinkedList<>();
        	q.add(A);
        	while(!q.isEmpty())
		{
            		int size = q.size();
            		ArrayList<Integer> row = new ArrayList<>();
            		for(int i=1;i<=size;i++)
			{
                		TreeNode x = q.remove();
                		row.add(x.val);
                		if(x.left != null)
				{
                    			q.add(x.left);
                		}
                		if(x.right != null)
				{
                    			q.add(x.right);
                		}
            		}
            		result.add(row);
        	}
        	ArrayList<Integer> ans = new ArrayList<>();
        	for(ArrayList<Integer> sublist:result)
		{
            		if(!sublist.isEmpty())
			{
                		ans.add(sublist.get(sublist.size()-1));
            		}
        	}
        	return ans;
    	}
}