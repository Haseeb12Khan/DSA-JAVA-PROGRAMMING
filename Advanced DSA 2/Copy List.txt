				QUESTION
-> You are given a linked list A
-> Each node in the linked list contains two pointers: a next pointer and a random pointer
-> The next pointer points to the next node in the list
-> The random pointer can point to any node in the list, or it can be NULL
-> Your task is to create a deep copy of the linked list A
-> The copied list should be a completely separate linked list from the original list, but with the same node values and random pointer connections as the original list
-> You should create a new linked list B, where each node in B has the same value as the corresponding node in A
-> The next and random pointers of each node in B should point to the corresponding nodes in B (rather than A)

Problem Constraints:	0 <= |A| <= 10^6

Input Format:	
	-> The first argument of input contains a pointer to the head of linked list A.

Output Format:
	-> Return a pointer to the head of the required linked list.

Example Input:
	Given list:	1 -> 2 -> 3
			with random pointers going from
  			1 -> 3
  			2 -> 1
  			3 -> 1
  
Example Output:
   			1 -> 2 -> 3
			with random pointers going from
  			1 -> 3
  			2 -> 1
  			3 -> 1
  
Example Explanation:
	-> You should return a deep copy of the list. 
	-> The returned answer should not contain the same node as the original list, but a copy of them. 
	-> The pointers in the returned list should not link to any node in the original input list.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class RandomListNode 
{
     	int label;
     	RandomListNode next, random;
     	RandomListNode(int x) 
	{ 
		this.label = x; 
	}
}
 
public class Solution 
{
    	public RandomListNode copyRandomList(RandomListNode head) 
	{
        	if(head == null)
		{
            		return null;
        	}
        	RandomListNode current = head;
        	while(current != null)
		{
            		RandomListNode newNode = new RandomListNode(current.label);
            		newNode.next = current.next;
            		current.next = newNode; 
            		current = newNode.next;
        	}
        	current = head;
        	while(current != null)
		{
            		if(current.random != null)
			{
                		current.next.random = current.random.next;
            		}
            		current = current.next.next;
        	}
        	current = head;
        	RandomListNode copyHead = head.next;
        	RandomListNode copyCurrent = copyHead;
        	while(current != null)
		{
            		current.next = current.next.next;
            		if(copyCurrent.next != null)
			{
                		copyCurrent.next = copyCurrent.next.next;
            		}
            		current = current.next;
            		copyCurrent = copyCurrent.next;
        	}
        	return copyHead;
    	}
}