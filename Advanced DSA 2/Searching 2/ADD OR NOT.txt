				QUESTION
Given an array of integers A of size N and an integer B. In a single operation, any one element of the array can be increased by 1. You are allowed to do at most B such operations.

Find the number with the maximum number of occurrences and return an array C of size 2, where C[0] is the number of occurrences, and C[1] is the number with maximum occurrence.

If there are several such numbers, your task is to find the minimum one.

Problem Constraints:	1 <= N <= 10^5
			-10^9 <= A[i] <= 10^9
			0 <= B <= 10^9

Input Format:
	-> The first argument given is the integer array A.
	-> The second argument given is the integer B.

Output Format:
	-> Return an array C of size 2, where C[0] is number of occurence and C[1] is the number with maximum occurence.

Example Input:
	Input 1:	A = [3, 1, 2, 2, 1]
 			B = 3

	Input 2:	A = [5, 5, 5]
 			B = 3

Example Output:
	Output 1:	[4, 2]

	Output 2:	[3, 5]

Example Explanation:
	Explanation 1:	Apply operations on A[2] and A[4]
 			A = [3, 2, 2, 2, 2]
 			Maximum occurence =  4
 			Minimum value of element with maximum occurence = 2

	Explanation 2:	A = [5, 5, 5]
 			Maximum occurence =  3
 			Minimum value of element with maximum occurence = 5
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int[] solve(int[] A, int B) 
	{
        	Arrays.sort(A);
        	int n = A.length;
        	int maxFrequency = 0;
        	int minNumberWithMaxFrequency = A[0];
        	for(int i=0;i<n;i++)
		{
            		int opeartions = B;
            		int currentFrequency = 1;
            		for(int j=i-1;j>=0;j--)
			{
                		int cost = A[i] - A[j];
                		if(opeartions >= cost)
				{
                    			opeartions -= cost;
                    			currentFrequency++;
                		}
                		else
				{
                    			break;
                		}
            		}
            		if(currentFrequency > maxFrequency || (currentFrequency == maxFrequency && A[i] < minNumberWithMaxFrequency))
			{
                		maxFrequency = currentFrequency;
                		minNumberWithMaxFrequency = A[i];
            		}
        	}
        	return new int[]{maxFrequency,minNumberWithMaxFrequency};
    	}
}