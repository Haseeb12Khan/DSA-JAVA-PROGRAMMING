				QUESTION
Given a matrix of integers A of size N x M in which each row is sorted. Find and return the overall median of matrix A.

	NOTE: No extra memory is allowed.

	NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

Problem Constraints:	1 <= N, M <= 10^5
			1 <= N*M <= 10^6
			1 <= A[i] <= 10^9
			N*M is odd

Input Format:
	-> The first and only argument given is the integer matrix A.

Output Format:
	-> Return the overall median of matrix A.

Example Input:
	Input 1:	A = [   [1, 3, 5],
        		        [2, 6, 9],
        		        [3, 6, 9]   ] 

	Input 2:	A = [   [5, 17, 100]    ]

Example Output:
	Output 1:	5 

	Output 2:	17

Example Explanation:
	Explanation 1:		A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
				Median is 5. So, we return 5. 

	Explanation 2:		Median is 17.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	private int count(int A[],int x)
	{
        	int i = 0;
        	int j = A.length-1;
        	int ans = -1;
        	while(i<=j)
		{
            		int m = (i+j)/2;
            		if(A[m] > x)
			{
                		ans = m;
                		j = m-1;
            		}
            		else
			{
                		i = m+1;
            		}
        	}
        	if(ans == -1)
		{
            		return A.length;
        	}
        	return ans;
    	}
    	public int findMedian(int[][] A) 
	{
        	int N = A.length;-----------> Length of rows in array A
        	int M = A[0].length;--------> Length of columns in array A

        	int l = 0;---------> Left pointer to find median
        	int r = 0;---------> Right pointer to find median
        	int mid;-----------> Mid pointer to find median

        	int req = (N*M)/2 + 1;--------> Required median point

        	for(int row=0;row<N;row++)
		{
            		r = Math.max(r,A[row][M-1]);---------> Find the maximum range of r. [l=0 is fixed initially, r is formed using this math function]
        	}

        	int ans = -1;--------> Variable to store the median value

        	while(l<=r)----------> Perform binary search operation
		{
            		mid = l + (r-l)/2;
            		int cnt = 0;------------> Count to find number of elements greater than mid
            		for(int[] row:A)
			{
                		int p = count(row,mid);
                		cnt += p;
            		}
            		if(cnt >= (req))--------> Update ans to mid and go left
			{
                		ans = mid;
                		r = mid-1;
            		}
            		else--------------------> Go right
			{
                		l = mid+1;
            		}
        	}
        	return ans;---------------------> Return median value
    	}
}
