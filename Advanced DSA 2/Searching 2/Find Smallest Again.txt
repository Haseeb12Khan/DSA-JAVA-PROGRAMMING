				QUESTION
Given an integer array A of size N. If we store the sum of each triplet of the array A in a new list, then find the Bth smallest element among the list.

NOTE: A triplet consists of three elements from the array. Let's say if A[i], A[j], A[k] are the elements of the triplet then i < j < k.

Problem Constraints:	3 <= N <= 500
			1 <= A[i] <= 10^8
			1 <= B <= (N*(N-1)*(N-2))/6

Input Format:
	-> The first argument is an integer array A.
	-> The second argument is an integer B.

Output Format:
	-> Return an integer denoting the Bth element of the list.

Example Input:
	Input 1:	A = [2, 4, 3, 2]
 			B = 3
	
	Input 2:	A = [1, 5, 7, 3, 2]
 			B = 9

Example Output:
	Output 1:	9 

	Output 2:	14

Example Explanation:
	Explanation 1:	All the triplets of the array A are:
			(2, 4, 3) = 9
 			(2, 4, 2) = 8
 			(2, 3, 2) = 7
 			(4, 3, 2) = 9
			So the 3rd smallest element is 9.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int solve(int[] A, int B) 
	{
        	Arrays.sort(A);
        	int n = A.length;
        	int low = A[0] + A[1] + A[2];
        	int high = A[n-1] + A[n-2] + A[n-3];
        	while(low < high)
		{
            		int mid = low + (high-low)/2;
            		int count = countTripletsLessThanOrEqualTo(A,mid);
            		if(count < B)
			{
                		low = mid+1;
            		}
            		else
			{
                		high = mid;
            		}
        	}
        	return low;
    	}
    	private int countTripletsLessThanOrEqualTo(int A[],int target)
	{
        	int n = A.length;
        	int count = 0;
        	for(int i=0;i<n-2;i++)
		{
            		int j = i+1;
            		int k = n-1;
            		while(j<k)
			{
                		int sum = A[i] + A[j] + A[k];
                		if(sum<=target)
				{
                    			count += (k-j);
                    			j++;
                		}
                		else
				{
                    			k--;
                		}
            		}
        	}
        	return count;
    	}
}