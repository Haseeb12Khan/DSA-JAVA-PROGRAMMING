				QUESTION
Given a sorted array of integers A (0-indexed) of size N, find the left most and the right most index of a given integer B in the array A.

Return an array of size 2, such that 
          -> First element = Left most index of B in A
          -> Second element = Right most index of B in A.
If B is not found in A, return [-1, -1].

Note : Your algorithm's runtime complexity must be in the order of O(log n).

Problem Constraints:	1 <= N <= 10^6
			1 <= A[i], B <= 10^9

Input Format:
	-> The first argument given is the integer array A.
	-> The second argument given is the integer B.

Output Format:
	-> Return the left most and right most index (0-based) of B in A as a 2-element array. If B is not found in A, return [-1, -1].

Example Input:
	Input 1:	A = [5, 7, 7, 8, 8, 10]
 			B = 8

	Input 2:	A = [5, 17, 100, 111]
 			B = 3

Example Output:
	Output 1:	[3, 4]

	Output 2:	[-1, -1]

Example Explanation:
	Explanation 1:	The first occurrence of 8 in A is at index 3.
 			The last occurrence of 8 in A is at index 4.
 			ans = [3, 4]

	Explanation 2:	There is no occurrence of 3 in the array.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	// DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    	public int[] searchRange(final int[] A, int B) 
	{
        	int res[] = new int[2]; ------> resultant array to store the occurrences of B.
        	int N = A.length;
        
		//Find the first occurrence of B in array A.
		int l = 0;
        	int r = N-1;
        	int ans = -1;
        	while(l<=r)
		{
            		int mid = l + (r-l)/2;
            		if(A[mid] == B)
			{
                		ans = mid;
                		r = mid-1;
            		}
            		else if(A[mid] < B)
			{
                		l = mid+1;
            		}
            		else
			{
                		r = mid-1;
            		}
        	}
        	res[0] = ans; ------> store the first occurrence of B in res[0].
        
		//Find the last occurrence of B in array A.
		int left = 0;
        	int right = N-1;
        	int answer = -1;
        	while(left<=right)
		{
            		int mid = left + (right-left)/2;
            		if(A[mid] == B)
			{
                		answer = mid;
                		left = mid+1;
            		}
            		else if(A[mid] < B)
			{
                		left = mid+1;
            		}
            		else
			{
                		right = mid-1;
            		}
        	}
        	res[1] = answer; ------> store the last occurrence of B in res[1].
        
		return res;
    	}
}