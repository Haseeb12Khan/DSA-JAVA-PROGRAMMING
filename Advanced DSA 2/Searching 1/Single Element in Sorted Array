				QUESTION
Given a sorted array of integers A where every element appears twice except for one element which appears once, find and return this single element that appears only once.
Elements which are appearing twice are adjacent to each other.

NOTE: Users are expected to solve this in O(log(N)) time.

Problem Constraints:	1 <= |A| <= 100000
			1 <= A[i] <= 10^9

Input Format:
	-> The only argument given is the integer array A.

Output Format:
	-> Return the single element that appears only once.

Example Input:
	Input 1:	A = [1, 1, 7]

	Input 2:	A = [2, 3, 3]

Example Output:
	Output 1:	7

	Output 2:	2

Example Explanation:
	Explanation 1:	7 appears once

	Explanation 2:	2 appears once
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	private int safeGet(int A[],int index)
	{
        	int N = A.length;
        	if(0<=index && index<N)
		{
            		return A[index];
        	}
        	return Integer.MAX_VALUE;
    	}
    	public int solve(int[] A) 
	{
        	int N = A.length;
        	int l = 0;
        	int r = N-1;
        	while(l<=r)
		{
            		int mid = (l+r)/2;
            		if(safeGet(A,mid)!=safeGet(A,mid-1) && safeGet(A,mid)!=safeGet(A,mid+1))
			{
                		return A[mid];
            		}
            		int fo = mid;
            		if(safeGet(A,mid) == safeGet(A,mid-1))
			{
                		fo = mid-1;
            		}
            		if(fo%2 == 0)
			{
                		l = mid+1;
            		}
            		else
			{
                		r = mid-1;
            		}
        	}
        	return -1;
    	}
}
