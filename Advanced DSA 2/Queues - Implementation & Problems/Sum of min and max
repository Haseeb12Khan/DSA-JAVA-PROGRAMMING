				QUESTION
Given an array A of both positive and negative integers.

Your task is to compute the sum of minimum and maximum elements of all sub-array of size B.

NOTE: Since the answer can be very large, you are required to return the sum modulo (10^9 + 7).

Problem Constraints:	1 <= size of array A <= 10^5
			-10^9 <= A[i] <= 10^9
			1 <= B <= size of array

Input Format:
	-> The first argument denotes the integer array A.
	-> The second argument denotes the value B

Output Format:
	-> Return an integer that denotes the required value.

Example Input:
	Input 1:	A = [2, 5, -1, 7, -3, -1, -2]
 			B = 4

	Input 2:	A = [2, -1, 3]
 			B = 2

Example Output:
	Output 1:	18

	Output 2:	3

Example Explanation:
	Explanation 1:		Subarrays of size 4 are : 
    				[2, 5, -1, 7],   min + max = -1 + 7 = 6
    				[5, -1, 7, -3],  min + max = -3 + 7 = 4      
    				[-1, 7, -3, -1], min + max = -3 + 7 = 4
    				[7, -3, -1, -2], min + max = -3 + 7 = 4   
    				Sum of all min & max = 6 + 4 + 4 + 4 = 18 

	Explanation 2:		Subarrays of size 2 are : 
    				[2, -1],   min + max = -1 + 2 = 1
    				[-1, 3],   min + max = -1 + 3 = 2
    				Sum of all min & max = 1 + 2 = 3 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int solve(int[] A, int B) 
	{
        	long mod = 1000000007;
        	int n = A.length;

        	long maxSum = 0;--------> To store the value of maximum sum.
        	long minSum = 0;--------> To store the value of minimum sum.

        	Deque<Integer> maxD = new ArrayDeque<>();
        	Deque<Integer> minD = new ArrayDeque<>();

        	for (int i = 0; i < B; i++) ---------> Loop over first B window (0 to B-1).
		{
            		while (!maxD.isEmpty() && A[i] > maxD.peekLast()) 
			{
                		maxD.removeLast();
            		}

            		while (!minD.isEmpty() && A[i] < minD.peekLast()) 
			{
                		minD.removeLast();
            		}

            		maxD.addLast(A[i]);
            		minD.addLast(A[i]);
        	}

        	for (int i = B; i < n; i++) -----------> Loop over from remaining windows (B to N-1).
		{
            		maxSum = (maxSum + maxD.peekFirst());
            		minSum = (minSum + minD.peekFirst());

            		while (!maxD.isEmpty() && A[i] > maxD.peekLast()) 
			{
                		maxD.removeLast();
            		}

            		maxD.addLast(A[i]);

            		if(!maxD.isEmpty() && maxD.peekFirst() == A[i - B]) 
			{
                		maxD.removeFirst();
            		}

            		while (!minD.isEmpty() && A[i] < minD.peekLast()) 
			{
                		minD.removeLast();
            		}

            		minD.addLast(A[i]);

            		if (!minD.isEmpty() && minD.peekFirst() == A[i - B]) 
			{
                		minD.removeFirst();
            		}
        	}

        	maxSum = (maxSum + maxD.peekFirst());
        	minSum = (minSum + minD.peekFirst());

        	return (int) ((maxSum + minSum + mod * mod) % mod);
    	}
}
