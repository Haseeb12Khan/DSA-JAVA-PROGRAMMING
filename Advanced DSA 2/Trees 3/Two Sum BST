				QUESTION
Given a binary search tree A, where each node contains a positive integer, and an integer B. 
You have to find whether or not there exist two different nodes X and Y such that X.value + Y.value = B.

Return 1 to denote that two such nodes exist. 
Return 0, otherwise.

Problem Constraints:	1 <= size of tree <= 100000
			1 <= B <= 10^9

Input Format:
	-> First argument is the head of the tree A.
	-> Second argument is the integer B.

Output Format:
	-> Return 1 if such a pair can be found, 0 otherwise.

Example Input:
Input 1:
         10
         / \
        9   20

B = 19

Input 2:
          10
         / \
        9   20

B = 40

Example Output:
	Output 1:	1

	Output 2:	0

Example Explanation:
	Explanation 1:	10 + 9 = 19. Hence 1 is returned.

	Explanation 2:	No such pair exists.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
    	int val;
     	TreeNode left;
     	TreeNode right;
     	TreeNode(int x) 
	{
      		val = x;
      		left=null;
      		right=null;
     	}
}

public class Solution 
{
    	public int t2Sum(TreeNode A, int B) 
	{
        	ArrayList<Integer> result = new ArrayList<>();
        	Queue<TreeNode> q = new LinkedList<>();
        	q.add(A);
        	while(!q.isEmpty())
		{
            		TreeNode temp = q.poll();
            		if(temp != null)
			{
                		result.add(temp.val);
                		q.add(temp.left);
                		q.add(temp.right);
            		}
        	}
        	for(int i=0;i<result.size()-1;i++)
		{
            		for(int j=i+1;j<result.size();j++)
			{
                		if(result.get(i) + result.get(j) == B)
				{
                    			return 1;
                		}
            		}
        	}
        	return 0;
    	}
}
