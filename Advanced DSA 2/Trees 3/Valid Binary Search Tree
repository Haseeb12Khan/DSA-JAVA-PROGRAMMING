				QUESTION
You are given a binary tree represented by root A. You need to check if it is a Binary Search Tree or not.

Assume a BST is defined as follows:
	1) The left subtree of a node contains only nodes with keys less than the node's key.
	2) The right subtree of a node contains only nodes with keys greater than the node's key.
	3) Both the left and right subtrees must also be binary search trees.

Problem Constraints:	1 <= Number of nodes in binary tree <= 10^5
			0 <= node values <= 2^32-1

Input Format:
	-> First and only argument is head of the binary tree A.

Output Format:
	-> Return 0 if false and 1 if true.

Example Input:
Input 1:
   1
  / \
 2   3

Input 2: 
  2
 / \
1   3

Example Output:
	Output 1:	0

	Output 2:	1

Example Explanation:
	Explanation 1:	2 is not less than 1 but is in left subtree of 1.

	Explanation 2:	Satisfies all conditions.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
    	int val;
     	TreeNode left;
     	TreeNode right;
     	TreeNode(int x) 
	{
      		val = x;
      		left=null;
      		right=null;
     	}
}

public class Solution 
{
    	public int isValidBST(TreeNode A) 
	{
        	int minVal = Integer.MIN_VALUE;
        	int maxVal = Integer.MAX_VALUE;
        	boolean ans = checkBST(A,minVal,maxVal);
        	int result = (ans == true)? 1:0;
        	return result;
    	}
    	public boolean checkBST(TreeNode root,int minVal,int maxVal)
	{
        	if(root == null)
		{
            		return true;
        	}
        	if(root.val<minVal || root.val>maxVal)
		{
            		return false;
        	}
        	return checkBST(root.left,minVal,root.val) && checkBST(root.right,root.val,maxVal);
    	}
}
