				QUESTION
Given string A denoting an infix expression. Convert the infix expression into a postfix expression.
String A consists of ^, /, *, +, -, (, ) and lowercase English alphabets where lowercase English alphabets are operands and ^, /, *, +, - are operators.
Find and return the postfix expression of A.

NOTE:
	-> ^ has the highest precedence.
	-> / and * have equal precedence but greater than + and -.
	-> + and - have equal precedence and lowest precedence among given operators.

Problem Constraints:	1 <= length of the string <= 500000

Input Format:
	-> The only argument given is string A.

Output Format:
	-> Return a string denoting the postfix conversion of A.

Example Input:
	Input 1:	A = "x^y/(a*z)+b"

	Input 2:	A = "a+b*(c^d-e)^(f+g*h)-i"

Example Output:
	Output 1:	"xy^az*/b+"

	Output 2:	"abcd^e-fgh*+^*+i-"

Example Explanation:
	Explanation 1:	Output dentotes the postfix expression of the given input.

	Explanation 2:	Output dentotes the postfix expression of the given input.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int prec(char a)
	{
        	if(a=='^')
		{
            		return 3;
        	}
        	else if(a=='*' || a=='/')
		{
            		return 2;
        	}
        	else if(a=='+' || a=='-')
		{
            		return 1;
        	}
        	else 
		{
            		return 0;
        	}
    	}
    	public String solve(String A) 
	{
        	int n = A.length();
        	StringBuilder ans = new StringBuilder();
        	Stack<Character> st = new Stack<>();
        	for(int i=0; i<n; i++)
		{
            		char ch = A.charAt(i);
            		if(ch>='a' && ch<='z')
			{
               			ans.append(ch);
            		}
            		else if(ch=='*' || ch=='/' || ch=='+' || ch=='-' || ch=='^')
			{
                		if(st.isEmpty()==false) 
				{
                    			while(st.isEmpty()==false && prec(st.peek())>=prec(ch))
					{
                        			ans.append(st.pop());
                    			}
                		}
                		st.push(ch);
            		}
            		else if(ch=='(')
			{
                		st.push(ch);
            		}
            		else if(ch==')')
			{
                		while(st.isEmpty()==false && st.peek()!='(')
				{
                    			ans.append(st.pop());
                		}
                		if(st.isEmpty()==false)
                    			st.pop();
                	}
            	}
            	while(st.isEmpty()==false)
		{
                	ans.append(st.pop());
            	}
        	return ans.toString();
    	}
}