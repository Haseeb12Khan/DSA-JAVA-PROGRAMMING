				QUESTION
Given an array of integers A.
A represents a histogram i.e A[i] denotes the height of the ith histogram's bar. 
Width of each bar is 1.

Find the area of the largest rectangle formed by the histogram.

Problem Constraints:	1 <= |A| <= 100000
			1 <= A[i] <= 10000

Input Format:
	-> The only argument given is the integer array A.

Output Format:
	-> Return the area of the largest rectangle in the histogram.

Example Input:
	Input 1:	A = [2, 1, 5, 6, 2, 3]

	Input 2:	A = [2]

Example Output:
	Output 1:	10

	Output 2:	2

Example Explanation:
	Explanation 1:	The largest rectangle has area = 10 unit. 
			Formed by A[3] to A[4].

	Explanation 2:	Largest rectangle has area 2.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int largestRectangleArea(int[] A) 
	{
        	int N = A.length;
        	int NSL[] = new int[N];
        	Stack<Integer> stack1 = new Stack<>();
        	for(int i=0;i<N;i++)
		{
            		while(!stack1.isEmpty() && A[stack1.peek()] >= A[i])
			{
                		stack1.pop();
            		}
            		if(stack1.isEmpty())
			{
                		NSL[i] = -1;
            		}
            		else
			{
                		NSL[i] = stack1.peek();
            		}
            		stack1.push(i);
        	}

        	int NSR[] = new int[N];
        	Stack<Integer> stack2 = new Stack<>();
        	for(int i=N-1;i>=0;i--)
		{
            		while(!stack2.isEmpty() && A[stack2.peek()] >= A[i])
			{
                		stack2.pop();
            		}
            		if(stack2.isEmpty())
			{
                		NSR[i] = N;
            		}
            		else
			{
                		NSR[i] = stack2.peek();
            		}
            		stack2.push(i);
        	}

        	int maxArea = 0;
        	for(int i=0;i<N;i++)
		{
            		int height = A[i];
            		int l = NSL[i];
            		int r = NSR[i];
            		int width = r-l-1;
            		int area = height * width;
            		maxArea = Math.max(maxArea,area);
        	}
        	return maxArea;
    	}
}