				QUESTION
Given an array of integers A. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (10^9 + 7).

Problem Constraints:	1 <= length of the array <= 10^5
			1 <= A[i] <= 10^9

Input Format:
	-> The only argument given is the integer array A.

Output Format:
	-> Return the number of inversions of A modulo (10^9 + 7).

Example Input:
	Input 1:	A = [1, 3, 2]

	Input 2:	A = [3, 4, 1, 2]

Example Output:
	Output 1:	1

	Output 2:	4

Example Explanation:
	Explanation 1:	The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]

	Explanation 2:	The pair (0, 2) is an inversion as 0 < 2 and A[0] > A[2]
			The pair (0, 3) is an inversion as 0 < 3 and A[0] > A[3]
			The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]
			The pair (1, 3) is an inversion as 1 < 3 and A[1] > A[3]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	private static final int MOD = 1000000007;
    	public int solve(int[] A) 
	{   
        	return mergeSortAndCount(A,0,A.length-1);
    	}
    	private int mergeSortAndCount(int[] A,int left,int right)
	{
        	if(left >= right)
		{
            		return 0;
        	}
        	int mid = left + (right - left)/2;
        	int count = mergeSortAndCount(A,left,mid) % MOD;
        	count = (count + mergeSortAndCount(A,mid+1,right)) % MOD;
        	count = (count + mergeAndCount(A,left,mid,right)) % MOD;
        	return count;
    	}
    	private int mergeAndCount(int[] A,int left,int mid,int right)
	{
        	int leftArr[] = new int[mid-left+1];
        	int rightArr[] = new int[right-mid];
       		for(int i=0;i<leftArr.length;i++)
		{
            		leftArr[i] = A[left+i];
        	}
        	for(int i=0;i<rightArr.length;i++)
		{
            		rightArr[i] = A[mid+1+i];
        	}
        	int i = 0;
        	int j = 0;
        	int k = left;
        	int count = 0;
        	while(i<leftArr.length && j<rightArr.length)
		{
            		if(leftArr[i] <= rightArr[j])
			{
                		A[k++] = leftArr[i++];
            		}	
            		else
			{
                		A[k++] = rightArr[j++];
                		count = (count + (leftArr.length-i)) % MOD;
            		}
        	}
        	while(i<leftArr.length)
		{
            		A[k++] = leftArr[i++];
        	}
        	while(j<rightArr.length)
		{
            		A[k++] = rightArr[j++];
        	}
        	return count;
    	}
}