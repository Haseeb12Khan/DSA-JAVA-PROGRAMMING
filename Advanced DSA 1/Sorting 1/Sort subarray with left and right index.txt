				QUESTION
You are given an array A of integers of length N and two indices, B and C.
Your task is to sort the subarray [B, C] within the given array. The rest of the array should remain unchanged.

Problem Constraints:	1 ≤ N ≤ 10^5
			0 ≤ A[i] ≤ 10^9
			0 ≤ B ≤ C ≤ N - 1

Input Format:
	-> First argument is the array A of length N. The next two arguments are the integers B and C.

Output Format:
	-> Return the array after sorting the [B, C] subarray.

Example Input:
	Input 1:	A = [59, 11, 8, 91, 49, 44, 8]
			B = 4
			C = 6

	Input 2:	A = [50, 40, 30, 20, 10]
			B = 0
			C = 3

Example Output:
	Output 1:	[59, 11, 8, 91, 8, 44, 49]

	Output 2:	[20, 30, 40, 50, 10]

Example Explanation:
	Explanation 1:	Initially the subarray [B, C], i.e. A[4, 6] = [49, 44, 8].
			After sorting this becomes [8, 44, 49].
			It can be seen that this subarray gets sorted and rest of the array remains unchanged!

	Explanation 2:	Initially the subarray [B, C], i.e. A[0, 3] = [50, 40, 30, 20].
			After sorting this becomes [20, 30, 40, 50].
			It can be seen that this subarray gets sorted and rest of the array remains unchanged!
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution
{
	private void mergeSort(int A[],int low,int high)
	{
		if(low < high)
		{
			int mid = (low + high)/2;
			mergeSort(A,low,mid);
			mergeSort(A,mid+1,high);
			merge(A,low,mid,high);
		}
	}
	
	private void merge(int A[],int low,int mid,int high)
	{
		int C[] = new int[high-low+1];
		int a = low;
		int b = mid + 1;
		int c = 0;
		while(a<=mid && b<=high)
		{
            			if(A[a] < A[b])
			{
                				C[c] = A[a];
                				a++;
                				c++;
            			}
            			else
			{
				C[c] = A[b];
				b++;
				c++;
			}
        		}
        		while(a<=mid)
		{
			C[c] = A[a];
			a++;
			c++;
		}
		while(b<=high)
		{
			C[c] = A[b];
			b++;
			c++;
		}
		a = low;
		for(int i=0;i<C.length;i++)
		{
			A[a] = C[i];
			a++;
		}
    	}
	public int[] solve(int A[],int B,int C)
	{
		mergeSort(A,B,C);
		return A;
	}
}
