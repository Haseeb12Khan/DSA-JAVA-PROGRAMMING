				QUESTION
Given an array A. Sort this array using Count Sort Algorithm and return the sorted array.

Problem Constraints:	1 <= |A| <= 10^5
			1 <= A[i] <= 10^5

Input Format:
	-> The first argument is an integer array A.

Output Format:
	-> Return an integer array that is the sorted array A.

Example Input:
	Input 1:	A = [1, 3, 1]

	Input 2:	A = [4, 2, 1, 3]

Example Output:
	Output 1:	[1, 1, 3]

	Output 2:	[1, 2, 3, 4]

Example Explanation:
	For Input 1:	The array in sorted order is [1, 1, 3].

	For Input 2:	The array in sorted order is [1, 2, 3, 4].
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	private void mergeSort(int A[],int low,int high)
	{
        	if(low < high)
		{
            		int mid = (low + high)/2;
            		mergeSort(A,low,mid);
            		mergeSort(A,mid+1,high);
            		merge(A,low,mid,high);
        	}
    	}
    	private void merge(int A[],int low,int mid,int high)
	{
        	int C[] = new int[high-low+1];
        	int a = low;
        	int b = mid+1;
        	int c = 0;
        	while(a<=mid && b<=high)
		{
            		if(A[a] < A[b])
			{
                		C[c] = A[a];
                		a++;
                		c++;
            		}
            		else
			{
                		C[c] = A[b];
                		b++;
                		c++;
            		}
        	}
        	while(a<=mid)
		{
            		C[c] = A[a];
            		a++;
            		c++;
        	}
        	while(b<=high)
		{
            		C[c] = A[b];
            		b++;
            		c++;
        	}
        	a = low;
        	for(int i=0;i<C.length;i++)
		{
            		A[a] = C[i];
            		a++;
        	}
    	}
    	public int[] solve(int[] A) 
	{
        	if(A==null || A.length == 0)
		{
            		return A;
        	}
        	mergeSort(A,0,A.length-1);
        	return A;
    	}
}