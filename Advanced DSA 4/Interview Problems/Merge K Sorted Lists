				QUESTION
Given a list containing head pointers of N sorted linked lists. Merge these given sorted linked lists and return them as one sorted list.

Problem Constraints:	1 <= total number of elements in given linked lists <= 100000

Input Format:
	-> The first and only argument is a list containing N head pointers.

Output Format:
	-> Return a pointer to the head of the sorted linked list after merging all the given linked lists.

Example Input:
	Input 1:	1 -> 10 -> 20
 			4 -> 11 -> 13
 			3 -> 8 -> 9

	Input 2:	10 -> 12
 			13
 			5 -> 6

Example Output:
	Output 1:	1 -> 3 -> 4 -> 8 -> 9 -> 10 -> 11 -> 13 -> 20

	Output 2:	5 -> 6 -> 10 -> 12 ->13

Example Explanation:
	Explanation 1:	The resulting sorted Linked List formed after merging is 1 -> 3 -> 4 -> 8 -> 9 -> 10 -> 11 -> 13 -> 20.

	Explanation 2:	The resulting sorted Linked List formed after merging is 5 -> 6 -> 10 -> 12 ->13.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class ListNode 
{
      	public int val;
      	public ListNode next;
      	ListNode(int x) 
	{ 
		val = x; 
		next = null; 
	}
}

public class Solution 
{
	public ListNode mergeKLists(ArrayList<ListNode> a) 
	{
        	if(a == null || a.size() == 0) 
		{
            		return null;
        	}
        	PriorityQueue<ListNode> minHeap = new PriorityQueue<>((A,B) -> A.val - B.val);
        	for(ListNode head:a) 
		{
            		if(head != null) 
			{
                		minHeap.add(head);
            		}
        	}
        	ListNode dummy = new ListNode(0);
        	ListNode current = dummy;
        	while(!minHeap.isEmpty()) 
		{
            		ListNode node = minHeap.poll();
            		current.next = node;
            		current = current.next;
            		if(node.next != null) 
			{
                		minHeap.add(node.next);
            		}
        	}
        	return dummy.next;
	}
}
