				QUESTION
Given character matrix A of dimensions NÃ—M consisting of O's and X's, where O = white, X = black.

Return the number of black shapes. A black shape consists of one or more adjacent X's (diagonals not included)


Problem Constraints:	1 <= N, M <= 1000
			A[i][j] = 'X' or 'O'

Input Format:
	-> The First and only argument is character matrix A.

Output Format:
	-> Return a single integer denoting number of black shapes.

Example Input:
	Input 1:	A = [ [X, X, X], [X, X, X], [X, X, X] ]

	Input 2:	A = [ [X, O], [O, X] ]

Example Output:
	Output 1:	1

	Output 2:	2

Example Explanation:
	Explanation 1:	All X's belong to single shapes

	Explanation 2:	Both X's belong to different shapes
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int xdir[] = { -1, 0, 1, 0 };
    	public int ydir[] = { 0, -1, 0, 1 };
    	public int black(String[] A) 
	{
        	char[][] arr = generateCharArray(A);
        	int n = arr.length;
        	int m = arr[0].length;
        	int count = 0;
        	for(int i = 0; i < n; i++) 
		{
            		for(int j = 0; j < m; j++) 
			{
                		if(arr[i][j] == 'X') 
				{
                    			arr[i][j] = 'O'; 
                    			Island(arr, i, j); 
                    			count++; 
                		}
            		}
        	}
        	return count;
    	}
    	public void Island(char[][] arr, int i, int j) 
	{
        	for(int d = 0; d < 4; d++) 
		{
            		int r = i + xdir[d];
            		int c = j + ydir[d];
            		if(r >= 0 && r < arr.length && c >= 0 && c < arr[0].length && arr[r][c] == 'X') 
			{
                		arr[r][c] = 'O'; 
                		Island(arr, r, c); 
            		}
        	}
    	}
    	public char[][] generateCharArray(String[] A) 
	{
        	int n = A.length;
        	int m = A[0].length();
        	char[][] arr = new char[n][m];
        	for(int i = 0; i < n; i++) 
		{
            		String temp = A[i];
            		for(int j = 0; j < m; j++) 
			{
                		arr[i][j] = temp.charAt(j);
            		}
        	}
        	return arr;
    	}
}
