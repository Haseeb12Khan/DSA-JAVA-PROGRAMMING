				QUESTION
Given a undirected weighted graph with A nodes labelled from 1 to A with M edges given in a form of 2D-matrix B of size M * 3 where B[i][0] and B[i][1] denotes the two nodes connected by an edge of weight B[i][2].

For each edge check whether it belongs to any of the possible minimum spanning tree or not , return 1 if it belongs else return 0.

Return an one-dimensional binary array of size M denoting answer for each edge.

NOTE:
	-> The graph may be disconnected in that case consider mst for each component.
	-> No self-loops and no multiple edges present.
	-> Answers in output array must be in order with the input array B output[i] must denote the answer of edge B[i][0] to B[i][1].

Problem Constraints:	1 <= A, M <= 3 * 10^5
			1 <= B[i][0], B[i][1] <= A
			1 <= B[i][1] <= 10^3

Input Format:
	-> The first argument given is an integer A representing the number of nodes in the graph.
	-> The second argument given is an matrix B of size M x 3 which represents the M edges such that there is a edge between node B[i][0] and node B[i][1] with weight B[i][2].

Output Format:
	-> Return an one-dimensional binary array of size M denoting answer for each edge.

Example Input:
	Input 1:	A = 3
 			B = [[1, 2, 2],[1, 3, 2],[2, 3, 3]]
                  
Example Output:
	Output 1:	[1, 1, 0]

Example Explanation:
	Explanation 1:	Edge (1, 2) with weight 2 is included in the MST           
								1
                                                               / \
                                                              2   3
 			Edge (1, 3) with weight 2 is included in the same MST mentioned above.
 			Edge (2,3) with weight 3 cannot be included in any of the mst possible.
 			So we will return [1, 1, 0]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	private int[][] adj;
    	private int[] parent;
    	private int[] rank;
    	private int[] ans;
    	private void init(int A, int[][] B)
	{
        	int l = B.length;
        	adj = new int[l][4];
        	rank = new int[A+1];
        	parent = new int[A+1];
        	ans = new int[l];
        	for(int i=0;i<=A;i++)
		{
            		parent[i] = i;
        	}
        	for(int i=0;i<l;i++)
		{
            		adj[i][0] = i;
            		adj[i][1] = B[i][0];
            		adj[i][2] = B[i][1];
            		adj[i][3] = B[i][2];
        	}
        	Arrays.sort( adj, (e1, e2) -> Integer.compare( e1[3], e2[3]));
    	}
    	private int find(int x)
	{
        	if(parent[x] != x)
		{
            		parent[x] = find(parent[x]);
        	}
        	return parent[x];
    	}
    	private void union(int x, int y)
	{
        	int a = find(x);
        	int b = find(y);
        	if(a == b)
		{
            		return;
        	}
        	if(rank[a] > rank[b])
		{
            		parent[b] = a;
        	}
		else if(rank[a] < rank[b])
		{
            		parent[a] = b;
        	}
		else
		{
            		parent[b] = a;
            		rank[a]++;
        	}
    	}
    	public int[] solve(int A, int[][] B) 
	{
        	init(A, B);
        	kruskal(A);
        	return ans;
    	}
    	private void kruskal(int A)
	{       
        	int x = 0;
        	while(x < adj.length)
		{
            		int currWeight = adj[x][3];  
            		ArrayList<int[]> sameWeightEdges = new ArrayList<>(); 
            		while(x < adj.length && adj[x][3] == currWeight)
			{ 
                		sameWeightEdges.add(adj[x]);                  
                		x++;
            		}	
            		ArrayList<int[]> validMSTEdges = new ArrayList<>(); 
            		for(int[] temp : sameWeightEdges)
			{  
                		int i = temp[0];
                		int u = temp[1];
                		int v = temp[2];              
                		int pu = find(parent[u]);
                		int pv = find(parent[v]);
                		if(pu != pv)
				{
                    			ans[i] = 1;
                    			validMSTEdges.add(temp);
                		}
            		}
            		for(int[] temp : validMSTEdges)
			{                
                		int i = temp[0];
                		int u = temp[1];
                		int v = temp[2];              
                		int pu = find(parent[u]);
                		int pv = find(parent[v]);
                		if(pu != pv)
				{
                    			union(u, v);
                		}
            		}
        	}
    	}
}