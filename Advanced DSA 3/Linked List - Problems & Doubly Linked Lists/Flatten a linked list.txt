				QUESTION
Given a linked list where every node represents a linked list and contains two pointers of its type:
	Pointer to next node in the main list (right pointer)
	Pointer to a linked list where this node is head (down pointer). All linked lists are sorted.

You are asked to flatten the linked list into a single list. Use down pointer to link nodes of the flattened list. The flattened linked list should also be sorted.

Problem Constraints:	1 <= Total nodes in the list <= 100000
			1 <= Value of node <= 10^9

Input Format:
	-> The only argument given is head pointer of the doubly linked list.

Output Format:
	-> Return the head pointer of the Flattened list.

Example Input:
Input 1:
   3 -> 4 -> 20 -> 20 ->30
   |    |    |     |    |
   7    11   22    20   31
   |               |    |
   7               28   39
   |               |
   8               39

Input 2:
   2 -> 4 
   |    |       
   7    11    
   |            
   7

Example Output:
	Output 1:	3 -> 4 -> 7 -> 7 -> 8 -> 11 -> 20 -> 20 -> 20 -> 22 -> 28 -> 30 -> 31 -> 39 -> 39 

	Output 2:	2 -> 4 -> 7 -> 7 -> 11

Example Explanation:
	Explanation:	The return linked list is the flatten sorted list.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class ListNode 
{
	int val;
    	ListNode right, down;
    	ListNode(int x) 
	{
        	val = x;
        	right = down = null;
    	}
}

ListNode flatten(ListNode root) 
{
    	ListNode head = root;
    	while(head.right != null) 
	{
        	ListNode res = mergeList(head,head.right);
        	ListNode tmp = head;
        	ListNode tmp1 = head.right;
        	ListNode tmp2 = head.right.right;
        	tmp.right = null;
        	tmp1.right = null;
        	res.right = tmp2;
        	head = res;
    	}
    	return head;
}

ListNode mergeList(ListNode p1,ListNode p2) 
{
    	ListNode res = null;
    	ListNode curr = null;
    	while(p1 != null && p2 != null) 
	{       
        	if(p1.val < p2.val) 
		{
            		ListNode ls = new ListNode(p1.val);
            		if(res == null) 
			{
                		res = ls;
                		curr = ls;
            		}
            		else 
			{
                		curr.down = ls;
                		curr = curr.down;
            		}
            		p1 = p1.down;
        	}
        	else 
		{
            		ListNode ls = new ListNode(p2.val);
            		if(res == null) 
			{
                		res = ls;
                		curr = ls;
            		}
            		else 
			{
                		curr.down = ls;
                		curr = curr.down;
            		}       
            		p2 = p2.down;
        	}
    	}
    	while(p1 != null) 
	{
        	ListNode ls = new ListNode(p1.val);
        	curr.down = ls;
        	curr = curr.down;
        	p1 = p1.down;
    	}
    	while(p2 != null) 
	{
        	ListNode ls = new ListNode(p2.val);
        	curr.down = ls;
        	curr = curr.down;
        	p2 = p2.down;
    	}
    	return res;
}