				QUESTION
Given a binary tree of integers denoted by root A. Return an array of integers representing the top view of the Binary tree.

The top view of a Binary Tree is a set of nodes visible when the tree is visited from the top. Return the nodes in any order.

Problem Constraints:	1 <= Number of nodes in binary tree <= 100000
			0 <= node values <= 10^9

Input Format:
	-> First and only argument is head of the binary tree A.

Output Format:
	-> Return an array, representing the top view of the binary tree.

Example Input:
	Input 1:
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 

	Input 2:
            1
           /  \
          2    3
           \
            4
             \
              5

Example Output:
	Output 1:	[1, 2, 4, 8, 3, 7]

	Output 2:	[1, 2, 3]

Example Explanation:
	Explanation 1:	Top view is described.

	Explanation 2:	Top view is described.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
      	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
	}
}
 
public class Solution 
{
    	public class Pair 
	{
        	TreeNode n;
        	int level;
        	Pair(TreeNode n,int level) 
		{
            		this.n = n;
            		this.level = level;
        	}
    	}
    	public ArrayList<Integer> solve(TreeNode A) 
	{
        	SortedMap<Integer,ArrayList<Integer>> sm = new TreeMap<>();
        	Queue<Pair> q = new LinkedList<>();
        	q.add(new Pair(A,0));
        	markNodesLevelOrder(q,sm);
        	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        	for(Integer key:sm.keySet())
		{
            		ArrayList<Integer> t = sm.get(key);
            		res.add(t);
        	}
        	ArrayList<Integer> ans = new ArrayList<>();
		for(ArrayList<Integer> array:res)
		{
            		ans.add(array.get(0));
        	}
		return ans;
    	}
    	private void markNodesLevelOrder(Queue<Pair> q,SortedMap<Integer,ArrayList<Integer>> sm)
	{
        	ArrayList<Integer> t;
        	while(!q.isEmpty())
		{
            		Pair p = q.poll();
            		TreeNode node = p.n;
            		int level = p.level;
            		if(sm.containsKey(level))
			{
                		t = sm.get(level); 
            		}           
            		else
			{
                		t = new ArrayList<>();               
            		} 
            		t.add(node.val);  
            		sm.put(level,t);         
            		if(node.left != null)
			{
                		q.add(new Pair(node.left,level-1));
            		} 
            		if(node.right != null)
			{
                		q.add(new Pair(node.right,level+1));
            		}    
        	}
    	}
}