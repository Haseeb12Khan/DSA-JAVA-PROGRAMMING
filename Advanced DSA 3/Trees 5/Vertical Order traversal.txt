				QUESTION
Given a binary tree, return a 2-D array with vertical order traversal of it. 

NOTE: If 2 Tree Nodes shares the same vertical level then the one with lesser depth will come first.

Problem Constraints:	0 <= number of nodes <= 10^5

Input Format:
	-> First and only arument is a pointer to the root node of binary tree, A.

Output Format:
	-> Return a 2D array denoting the vertical order traversal of tree as shown.

Example Input:

Input 1:
      6
    /   \
   3     7
  / \     \
 2   5     9

Input 2:
      1
    /   \
   3     7
  /       \
 2         9

Example Output:
	Output 1:	[[2],[3],[6, 5],[7],[9]]

	Output 2:	[[2],[3],[1],[7],[9]]

Example Explanation:
	Explanation 1:	First row represent the verical line 1 and so on.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
      	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
	}
}
 
public class Solution 
{
    	public class Pair 
	{
        	TreeNode n;
        	int level;
        	Pair(TreeNode n,int level) 
		{
            		this.n = n;
            		this.level = level;
        	}
    	}
    	public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) 
	{
        	SortedMap<Integer,ArrayList<Integer>> sm = new TreeMap<>();
        	Queue<Pair> q = new LinkedList<>();
        	q.add(new Pair(A,0));
        	markNodesLevelOrder(q,sm);
        	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        	for(Integer key:sm.keySet())
		{
            		ArrayList<Integer> t = sm.get(key);
            		res.add(t);
        	}
        	return res;
    	}
    	private void markNodesLevelOrder(Queue<Pair> q,SortedMap<Integer,ArrayList<Integer>> sm)
	{
        	ArrayList<Integer> t;
        	while(!q.isEmpty())
		{
            		Pair p = q.poll();
            		TreeNode node = p.n;
            		int level = p.level;
            		if(sm.containsKey(level))
			{
                		t = sm.get(level); 
            		}           
            		else
			{
                		t = new ArrayList<>();               
            		} 
            		t.add(node.val);  
            		sm.put(level,t);         
            		if(node.left != null)
			{
                		q.add(new Pair(node.left,level-1));
            		} 
            		if(node.right != null)
			{
                		q.add(new Pair(node.right,level+1));
            		}    
        	}
    	}
}