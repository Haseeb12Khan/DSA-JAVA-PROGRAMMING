				QUESTION
Given an integer array A of size N denoting collection of numbers , return all possible permutations.

NOTE:	No two entries in the permutation sequence should be the same.
	For the purpose of this problem, assume that all the numbers in the collection are unique.
	Return the answer in any order

WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING PERMUTATIONS. 
Example: next_permutations in C++ / itertools.permutations in python.
	If you do, we will disqualify your submission retroactively and give you penalty points.

Problem Constraints:	1 <= N <= 9

Input Format:
	-> Only argument is an integer array A of size N.

Output Format:
	-> Return a 2-D array denoting all possible permutation of the array.

Example Input:	A = [1, 2, 3]

Example Output:	[ [1, 2, 3]
  		  [1, 3, 2]
  		  [2, 1, 3] 
  		  [2, 3, 1] 
  		  [3, 1, 2] 
  		  [3, 2, 1] ]

Example Explanation:	All the possible permutation of array [1, 2, 3].
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> A) 
	{
        	ArrayList<ArrayList<Integer>> arr = new ArrayList<>();
        	getAllPermutation(arr,A,0);
        	return arr;
    	}
    	private void getAllPermutation(ArrayList<ArrayList<Integer>> arr,ArrayList<Integer> A,int index) 
	{
        	if(index  == A.size())
		{
            		arr.add(new ArrayList<>(A));
        	}
        	for(int i=index;i<A.size();i++) 
		{
            		swap(i,index,A);
            		getAllPermutation(arr,A,index+1);
            		swap(i,index,A);
        	}
    	}
    	private void swap(int index1,int index2, ArrayList<Integer> A) 
	{   
      		int temp=A.get(index1);
      		A.set(index1,A.get(index2));
      		A.set(index2,temp);   
    	}
}
