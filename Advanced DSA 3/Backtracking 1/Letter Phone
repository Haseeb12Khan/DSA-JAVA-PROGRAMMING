				QUESTION
Given a digit string A, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below.
The digit 0 maps to 0 itself. The digit 1 maps to 1 itself.

NOTE: Make sure the returned strings are lexicographically sorted.

Problem Constraints:	1 <= |A| <= 10

Input Format:
	-> The only argument is a digit string A.

Output Format:
	-> Return a string array denoting the possible letter combinations.

Example Input:
	Input 1:	A = "23"

	Input 2:	A = "012"

Example Output:
	Output 1:	["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]

	Output 2:	["01a", "01b", "01c"]

Example Explanation:
	Explanation 1:	There are 9 possible letter combinations.

	Explanation 2:	Only 3 possible letter combinations.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	ArrayList<String> ans = new ArrayList<>();
    	public ArrayList<String> letterCombinations(String A) 
	{
        	String[] letters = {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        	int n = A.length();
        	getCombinations(A,letters, "");
        	return ans;
    	}
    	private void getCombinations(String A, String[] letters, String current)
	{
        	if(current.length() == A.length())
		{
            		ans.add(current);
            		return;
        	}
        	int c = A.charAt(current.length()) - '0';
        	int n = letters[c].length();
        	for(int i = 0; i < n; i++)
		{
            		getCombinations(A, letters, current+letters[c].charAt(i));
        	}
    	}
}
