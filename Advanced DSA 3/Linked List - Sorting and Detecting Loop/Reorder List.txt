				QUESTION
Given a singly linked list A	
	A: A0 → A1 → … → An-1 → An 
Reorder it to:
	A0 → An → A1 → An-1 → A2 → An-2 → … 

You must do this in-place without altering the nodes' values.

Problem Constraints:	1 <= |A| <= 10^6

Input Format:
	-> The first and the only argument of input contains a pointer to the head of the linked list A.

Output Format:
	-> Return a pointer to the head of the modified linked list.

Example Input:
	Input 1:	A = [1, 2, 3, 4, 5] 

	Input 2:	A = [1, 2, 3, 4] 

Example Output:
	Output 1:	[1, 5, 2, 4, 3] 

	Output 2:	[1, 4, 2, 3] 

Example Explanation:
	Explanation 1:	The array will be arranged to [A0, An, A1, An-1, A2].

	Explanation 2:	The array will be arranged to [A0, An, A1, An-1, A2].
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class ListNode 
{
	public int val;
     	public ListNode next;
     	ListNode(int x) 
	{ 
		val = x; 
		next = null; 
	}
}

public class Solution 
{
    	public ListNode reorderList(ListNode A) 
	{
        	if(A.next == null)
		{
            		return A;
        	}
        	ListNode slow = A;
        	ListNode fast = A;
        	while(fast.next != null && fast.next.next != null)
		{
            		slow = slow.next;
            		fast = fast.next.next;
        	}
        	ListNode second_half = reverseList(slow.next);
        	slow.next = null;
        	ListNode current = A;
        	while(second_half != null)
		{
            		ListNode current_next = current.next;
            		ListNode last_next = second_half.next;
            		current.next = second_half;
            		second_half.next = current_next;
            		current = current_next;
            		second_half = last_next;
        	}
        	return A;
    	}
    	ListNode reverseList(ListNode A)
	{
        	ListNode prev = null;
        	ListNode current = A;
        	while(current != null)
		{
            		ListNode next = current.next;
            		current.next = prev;
            		prev = current;
            		current = next;
        	}
        	return prev;
    	}
}
