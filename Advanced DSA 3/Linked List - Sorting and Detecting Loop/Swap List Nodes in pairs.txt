				QUESTION
Given a linked list A, swap every two adjacent nodes and return its head.

NOTE: Your algorithm should use only constant space. You may not modify the values in the list, only nodes themselves can be changed.

Problem Constraints:	1 <= |A| <= 10^6

Input Format:
	-> The first and the only argument of input contains a pointer to the head of the given linked list.

Output Format:
	-> Return a pointer to the head of the modified linked list.

Example Input:
	Input 1:	A = 1 -> 2 -> 3 -> 4

	Input 2:	A = 7 -> 2 -> 1

Example Output:
	Output 1:	2 -> 1 -> 4 -> 3

	Output 2:	2 -> 7 -> 1

Example Explanation:
	Explanation 1:	In the first example (1, 2) and (3, 4) are the adjacent nodes. 
			Swapping them will result in 2 -> 1 -> 4 -> 3

	Explanation 2:	In the second example, 3rd element i.e. 1 does not have an adjacent node, so it won't be swapped. 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class ListNode 
{
	public int val;
     	public ListNode next;
     	ListNode(int x) 
	{ 
		val = x; 
		next = null; 
	}
}

public class Solution
{
	public ListNode swapPairs(ListNode A)
	{
		ListNode start = new ListNode(0);
        	start.next = A;
        	ListNode current = start;
        	while(current.next != null && current.next.next != null)
		{
            		current.next = swap(current.next,current.next.next);
            		current = current.next.next;
        	}
        	return start.next;
	}
	ListNode swap(ListNode next1,ListNode next2)
	{
        	next1.next = next2.next;
        	next2.next = next1;
        	return next2;
    	}
}