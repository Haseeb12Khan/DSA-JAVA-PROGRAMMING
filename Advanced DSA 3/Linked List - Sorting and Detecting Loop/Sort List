				QUESTION
Sort a linked list, A in O(n log n) time.

Problem Constraints:	0 <= |A| = 10^5

Input Format:
	-> The first and the only arugment of input contains a pointer to the head of the linked list, A.

Output Format:
	-> Return a pointer to the head of the sorted linked list.

Example Input:
	Input 1:	A = [3, 4, 2, 8]

	Input 2:	A = [1]

Example Output:
	Output 1:	[2, 3, 4, 8]

	Output 2:	[1]

Example Explanation:
	Explanation 1:	The sorted form of [3, 4, 2, 8] is [2, 3, 4, 8].

	Explanation 2:	The sorted form of [1] is [1].
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class ListNode 
{
	public int val;
     	public ListNode next;
     	ListNode(int x) 
	{ 
		val = x; 
		next = null; 
	}
}

public class Solution 
{
    	public ListNode sortList(ListNode A) 
	{
        	if(A == null || A.next == null)
		{
            		return A;
        	}
        	ListNode mid = findMiddle(A);
        	ListNode head1 = mid.next;
        	mid.next = null;
        	A = sortList(A);
        	head1 = sortList(head1);

        	return mergeLL(A,head1);
    	}
    	ListNode findMiddle(ListNode head)
	{
        	if(head == null)
		{
            		return null;
        	}
        	ListNode slow = head;
        	ListNode fast = head;
        	while(fast.next != null && fast.next.next != null)
		{
            		slow = slow.next;
            		fast = fast.next.next;
        	}
        	return slow;
    	}
    	ListNode mergeLL(ListNode head1,ListNode head2)
	{
        	if(head1 == null)
		{
            		return head2;
        	}
        	if(head2 == null)
		{
            		return head1;
        	}
        	ListNode head = null;
        	ListNode t1 = head1;
        	ListNode t2 = head2;
        	if(t1.val <= t2.val)
		{
            		head = t1;
            		t1 = t1.next;
        	}
        	else
		{
            		head = t2;
            		t2 = t2.next;
        	}
        	ListNode temp = head;
        	while(t1 != null && t2 != null)
		{
            		if(t1.val <= t2.val)
			{
                		temp.next = t1;
                		t1 = t1.next;
            		}
            		else
			{
                		temp.next = t2;
                		t2 = t2.next;
            		}
            		temp = temp.next;
        	}
        	if(t1 != null)
		{
            		temp.next = t1;
        	}
        	else
		{
            		temp.next = t2;
        	}
        	return head;
    	}
}
