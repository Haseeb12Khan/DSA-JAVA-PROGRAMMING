				QUESTION
Two elements of a Binary Search Tree (BST), represented by root A are swapped by mistake. Tell us the 2 values, when swapped, will restore the Binary Search Tree (BST).
A solution using O(n) space is pretty straightforward. Could you devise a constant space solution?

Note: The 2 values must be returned in ascending order

Problem Constraints:	1 <= size of tree <= 100000

Input Format:
	-> First and only argument is the head of the tree,A

Output Format:
	-> Return the 2 elements which need to be swapped.

Example Input:
	Input 1:
         1 
        / \ 
       2   3

	Input 2:
         2
        / \
       3   1

Example Output:
	Output 1:	[2, 1]

	Output 2:	[3, 1]

Example Explanation:
	Explanation 1:	Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
		which is a valid BST 

	Explanation 2:	Swapping 1 and 3 will change the BST to be 
         2
        / \
       1   3

		which is a valid BST 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					SOLUTION

class TreeNode
{
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x)
	{
		val = x;
		left = null;
		right = null;
	}
}

public class Solution 
{
    	public ArrayList<Integer> recoverTree(TreeNode A) 
	{
        	ArrayList<Integer> result = new ArrayList<>();
        	TreeNode first = null;
        	TreeNode second = null;
        	TreeNode prev = null;
        	TreeNode current = A;
        	while(current != null)
		{
            		if(current.left == null)
			{
                		if(prev != null && current.val < prev.val)
				{
                    			if(first == null)
					{
                        			first = prev;
                    			}
                    			second = current;
                		}
                		prev = current;
                		current = current.right;
            		}
            		else
			{
                		TreeNode pred = current.left;
                		while(pred.right != null && pred.right != current)
				{
                    			pred = pred.right;
                		}
                		if(pred.right == null)
				{
                    			pred.right = current;
                    			current = current.left;
                		}
                		else
				{
                    			pred.right = null;
                    			if(prev != null && current.val < prev.val)
					{
                        			if(first == null)
						{
                            				first = prev;
                        			}
                        			second = current;
                    			}
                    			prev = current;
                    			current = current.right;
                		}
            		}
        	}
        	if(first != null && second != null)
		{
            		result.add(Math.min(first.val,second.val));
            		result.add(Math.max(first.val,second.val));
        	}
        	return result;
    	}
}