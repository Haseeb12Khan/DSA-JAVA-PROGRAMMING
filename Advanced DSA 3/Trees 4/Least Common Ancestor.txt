				QUESTION
Find the lowest common ancestor in an unordered binary tree A, given two values, B and C, in the tree.

Lowest common ancestor: The lowest common ancestor (LCA) of two nodes and w in a tree or directed acyclic graph (DAG) is the lowest node that has both v and w as descendants.

Problem Constraints:	1 <= size of tree <= 100000
			1 <= B, C <= 10^9

Input Format:
	-> First argument is head of tree A.
	-> Second argument is integer B.
	-> Third argument is integer C.

Output Format:
	-> Return the LCA.

Example Input:
Input 1: 
      1
     /  \
    2    3
B = 2
C = 3

Input 2:
      1
     /  \
    2    3
   / \
  4   5
B = 4
C = 5

Example Output:
	Output 1:	1

	Output 2:	2

Example Explanation:
	Explanation 1:	LCA is 1.

	Explanation 2:	LCA is 2.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION


class TreeNode 
{
	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
      	}
}
 
public class Solution 
{
    	public ArrayList<TreeNode> pathToRoot(TreeNode root, int val) 
	{
        	if(root == null) 
		{
            		ArrayList<TreeNode> al = new ArrayList<>();
            		return al;
        	}
        	if(root.val == val) 
		{
            		ArrayList<TreeNode> al = new ArrayList<>();
            		al.add(root);
            		return al;
        	}
        	ArrayList<TreeNode> leftList = pathToRoot(root.left,val);
        	if(leftList.size() != 0) 
		{
            		leftList.add(root);
            		return leftList;
        	}
        	ArrayList<TreeNode> rightList = pathToRoot(root.right,val);
        	if(rightList.size() != 0) 
		{
            		rightList.add(root);
            		return rightList;
        	}
        	return new ArrayList<>();
    	}
    	public int lca(TreeNode A, int B, int C) 
	{
        	ArrayList<TreeNode> l1 = pathToRoot(A, B);
        	ArrayList<TreeNode> l2 = pathToRoot(A, C);
        	int i = l1.size()-1;
        	int j = l2.size()-1;
        	if(l1.size()==0 || l2.size()==0) 
		{
            		return -1;
        	}
        	while(i>=0 && j>=0 && l1.get(i) == l2.get(j)) 
		{
            		i--;
            		j--;
        	}
        	return l2.get(j+1).val;
    	}
}