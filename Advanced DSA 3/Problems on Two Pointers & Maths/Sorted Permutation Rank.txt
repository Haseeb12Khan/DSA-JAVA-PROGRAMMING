				QUESTION
Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003.

Problem Constraints:	1 <= |A| <= 1000

Input Format:
	-> First argument is a string A.

Output Format:
	-> Return an integer denoting the rank of the given string.

Example Input:
	Input 1:	A = "acb"

	Input 2:	A = "a"

Example Output:
	Output 1:	2

	Output 2:	1

Example Explanation:
	Explanation 1:	Given A = "acb".
			The order permutations with letters 'a', 'c', and 'b' : 
				abc
				acb
				bac
				bca
				cab
				cba
			So, the rank of A is 2.

	Explanation 2:	Given A = "a".
			Rank is clearly 1.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public int findRank(String A) 
	{
        	int rank = 0;
        	int N = A.length();
        	for(int i=0;i<N-1;i++)
		{
            		int count = 0;
            		for(int j=i+1;j<N;j++)
			{
                		if(A.charAt(j) < A.charAt(i))
				{
                    			count++;
                		}
            		}
            		rank += (count * factorial(N-i-1)) % 1000003;
           	 	rank %= 1000003;
        	}
        	return rank+1;
    	}
    	private int factorial(int num)
	{
        	if(num == 0 || num == 1)
		{
            		return 1;
        	}
        	return (factorial(num-1) * num) % 1000003;
    	}
}
