				QUESTION
You are given 3 sorted arrays A, B and C.
Find i, j, k such that : max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])) is minimized.
Return the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])).

Problem Constraints:	1 <= len(A), len(B), len(c) <= 10^6	
			0 <= A[i], B[i], C[i] <= 10^7

Input Format:
	-> First argument is an integer array A.
	-> Second argument is an integer array B.
	-> Third argument is an integer array C.

Output Format:
	-> Return an single integer denoting the minimum max(abs(A[i] - B[j]), abs(B[j] - C[k]), abs(C[k] - A[i])).

Example Input:
	Input 1:	A = [1, 4, 10]
 			B = [2, 15, 20]
 			C = [10, 12]

	Input 2:	A = [3, 5, 6]
 			B = [2]
 			C = [3, 4]

Example Output:
	Output 1:	5

	Output 2:	1

Example Explanation:
	Explanation 1:	With 10 from A, 15 from B and 10 from C.

	Explanation 2:	With 3 from A, 2 from B and 3 from C.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	// DO NOT MODIFY THE LIST. IT IS READ ONLY
    	public int minimize(final List<Integer> A, final List<Integer> B, final List<Integer> C) 
	{
        	int p1 = 0;
        	int p2 = 0;
        	int p3 = 0;
        	int min_max = Integer.MAX_VALUE;

        	while(p1<A.size() && p2<B.size() && p3<C.size())
		{
            		int min = Math.min(Math.min(A.get(p1),B.get(p2)),C.get(p3));
            		int max = Math.max(Math.max(A.get(p1),B.get(p2)),C.get(p3));
            		min_max = Math.min(min_max,max-min);
            		if(A.get(p1) == min)
			{
                		p1++;
            		}
            		else if(B.get(p2) == min)
			{
                		p2++;
            		}
            		else
			{
                		p3++;
            		}
        	}
        	return min_max;
    	}
}
