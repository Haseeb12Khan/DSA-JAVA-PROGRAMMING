				QUESTION
Given a binary array A, find the maximum sequence of continuous 1's that can be formed by replacing at-most B zeroes.
For this problem, return the indices of maximum continuous series of 1s in order.
If there are multiple possible solutions, return the sequence which has the minimum start index.

Problem Constraints:	0 <= B <= 10^5
			1 <= size(A) <= 10^5
			0 <= A[i] <= 1

Input Format:
	-> First argument is an binary array A.
	-> Second argument is an integer B.

Output Format:
	-> Return an array of integers denoting the indices(0-based) of 1's in the maximum continuous series.

Example Input:
	Input 1:	A = [1, 1, 0, 1, 1, 0, 0, 1, 1, 1]
 			B = 1

	Input 2:	A = [1, 0, 0, 0, 1, 0, 1]
 			B = 2

Example Output:
	Output 1:	[0, 1, 2, 3, 4]

	Output 2:	[3, 4, 5, 6]

Example Explanation:
	Explanation 1:	Flipping 0 present at index 2 gives us the longest continous series of 1's i.e subarray [0:4].

	Explanation 2:	Flipping 0 present at index 3 and index 5 gives us the longest continous series of 1's i.e subarray [3:6].
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

public class Solution 
{
    	public ArrayList<Integer> maxone(ArrayList<Integer> A, int B) 
	{
        	int p1 = 0;
        	int p2 = 0;
        	int count = 0;
        	int ans = 0;
        	int fl = 0;
        	int fr = 0;

        	while(p2 < A.size())
		{
            		if(A.get(p2) == 0)
			{
                		count++;
            		}
            		if(count > B)
			{
                		while(p1 < p2 && count > B)
				{
                    			if(A.get(p1) == 0)
					{
                        			count--;
                    			}
                    			p1++;
                		}
            		}
            		int len = p2 - p1 + 1;
            		if(len > ans && count <= B)
			{
                		ans = len;
                		fl = p1;
                		fr = p2;
            		}
            		p2++;
        	}

        	ArrayList<Integer> result = new ArrayList<>();
        	for(int i=fl;i<=fr;i++)	
		{
            		result.add(i);
        	}
        	return result;
    	}
}