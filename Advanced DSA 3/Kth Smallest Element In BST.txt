				QUESTION
Given a binary search tree represented by root A, write a function to find the Bth smallest element in the tree.

Problem Constraints:	1 <= Number of nodes in binary tree <= 100000
			0 <= node values <= 10^9

Input Format:
	-> First and only argument is head of the binary tree A.

Output Format:
	-> Return an integer, representing the Bth element.

Example Input:
	Input 1:
            2
          /   \
         1    3
	B = 2

	Input 2:
            3
           /
          2
         /
        1
	B = 1

Example Output:
	Output 1:	2

	Output 2:	1

Example Explanation:
	Explanation 1:	2nd element is 2.

	Explanation 2:	1st element is 1.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
				SOLUTION

class TreeNode 
{
      	int val;
      	TreeNode left;
      	TreeNode right;
      	TreeNode(int x) 
	{
       		val = x;
       		left=null;
       		right=null;
      	}
}
 
public class Solution 
{
    	int counter = 0;
    	int ans = -1;
    	public int kthsmallest(TreeNode A, int B) 
	{
        	inorder(A,B);
        	return ans;
    	}
    	private void inorder(TreeNode A, int B)
	{
        	if(A == null)
		{
            		return;
        	}
        	inorder(A.left,B);
        	counter += 1;
        	if(counter == B)
		{
            		ans = A.val;
        	}
        	inorder(A.right,B);
    	}
}